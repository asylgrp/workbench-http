<?php 

declare(strict_types = 1);

namespace workbench\webb\Http;

/**
 * NOTE: This file was auto-generated by inroute 1.1.1 and should not be edited directly.
 */
final class HttpRouter implements \inroutephp\inroute\Runtime\HttpRouterInterface
{
    use \inroutephp\inroute\Runtime\Aura\HttpRouterTrait;

    protected function loadRoutes(\Aura\Router\Map $map): void
    {
        \inroutephp\inroute\Package::validateVersion('1.1.1');

        $mapper = new \inroutephp\inroute\Runtime\Aura\RouteMapper($map);

$mapper->mapRoute(\Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
    $o = [
        clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['inroutephp\\inroute\\Runtime\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('inroutephp\\inroute\\Runtime\\Route')),
    ],
    null,
    [
        'inroutephp\\inroute\\Runtime\\Route' => [
            'name' => [
                'workbench\\webb\\Http\\Route\\ContactList:listActive',
            ],
            'routable' => [
                true,
            ],
            'httpMethods' => [
                [
                    'GET',
                ],
            ],
            'path' => [
                '/contacts/active',
            ],
            'serviceId' => [
                'workbench\\webb\\Http\\Route\\ContactList',
            ],
            'serviceMethod' => [
                'listActive',
            ],
        ],
    ],
    $o[0],
    []
));
$mapper->mapRoute(\Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
    $o = [
        clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['inroutephp\\inroute\\Runtime\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('inroutephp\\inroute\\Runtime\\Route')),
    ],
    null,
    [
        'inroutephp\\inroute\\Runtime\\Route' => [
            'name' => [
                'workbench\\webb\\Http\\Route\\ContactList:listBanned',
            ],
            'routable' => [
                true,
            ],
            'httpMethods' => [
                [
                    'GET',
                ],
            ],
            'path' => [
                '/contacts/banned',
            ],
            'serviceId' => [
                'workbench\\webb\\Http\\Route\\ContactList',
            ],
            'serviceMethod' => [
                'listBanned',
            ],
        ],
    ],
    $o[0],
    []
));
$mapper->mapRoute(\Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
    $o = [
        clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['inroutephp\\inroute\\Runtime\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('inroutephp\\inroute\\Runtime\\Route')),
    ],
    null,
    [
        'inroutephp\\inroute\\Runtime\\Route' => [
            'name' => [
                'workbench\\webb\\Http\\Route\\ContactList:listBlocked',
            ],
            'routable' => [
                true,
            ],
            'httpMethods' => [
                [
                    'GET',
                ],
            ],
            'path' => [
                '/contacts/blocked',
            ],
            'serviceId' => [
                'workbench\\webb\\Http\\Route\\ContactList',
            ],
            'serviceMethod' => [
                'listBlocked',
            ],
        ],
    ],
    $o[0],
    []
));
$mapper->mapRoute(\Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
    $o = [
        clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['inroutephp\\inroute\\Runtime\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('inroutephp\\inroute\\Runtime\\Route')),
    ],
    null,
    [
        'inroutephp\\inroute\\Runtime\\Route' => [
            'name' => [
                'workbench\\webb\\Http\\Route\\Decisions:list',
            ],
            'routable' => [
                true,
            ],
            'httpMethods' => [
                [
                    'GET',
                ],
            ],
            'path' => [
                '/decisions',
            ],
            'serviceId' => [
                'workbench\\webb\\Http\\Route\\Decisions',
            ],
            'serviceMethod' => [
                'list',
            ],
        ],
    ],
    $o[0],
    []
));
$mapper->mapRoute(\Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
    $o = [
        clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['inroutephp\\inroute\\Runtime\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('inroutephp\\inroute\\Runtime\\Route')),
    ],
    null,
    [
        'inroutephp\\inroute\\Runtime\\Route' => [
            'name' => [
                'workbench\\webb\\Http\\Route\\Decisions:create',
            ],
            'routable' => [
                true,
            ],
            'httpMethods' => [
                [
                    'POST',
                ],
            ],
            'path' => [
                '/decisions',
            ],
            'serviceId' => [
                'workbench\\webb\\Http\\Route\\Decisions',
            ],
            'serviceMethod' => [
                'create',
            ],
        ],
    ],
    $o[0],
    []
));
$mapper->mapRoute(\Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
    $o = [
        clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['inroutephp\\inroute\\Runtime\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('inroutephp\\inroute\\Runtime\\Route')),
    ],
    null,
    [
        'inroutephp\\inroute\\Runtime\\Route' => [
            'name' => [
                'workbench\\webb\\Http\\Route\\Decisions:get',
            ],
            'routable' => [
                true,
            ],
            'httpMethods' => [
                [
                    'GET',
                ],
            ],
            'path' => [
                '/decisions/{id}',
            ],
            'serviceId' => [
                'workbench\\webb\\Http\\Route\\Decisions',
            ],
            'serviceMethod' => [
                'get',
            ],
        ],
    ],
    $o[0],
    []
));
$mapper->mapRoute(\Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
    $o = [
        clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['inroutephp\\inroute\\Runtime\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('inroutephp\\inroute\\Runtime\\Route')),
    ],
    null,
    [
        'inroutephp\\inroute\\Runtime\\Route' => [
            'name' => [
                'workbench\\webb\\Http\\Route\\Decisions:delete',
            ],
            'routable' => [
                true,
            ],
            'httpMethods' => [
                [
                    'POST',
                ],
            ],
            'path' => [
                '/decisions/{id}/delete',
            ],
            'serviceId' => [
                'workbench\\webb\\Http\\Route\\Decisions',
            ],
            'serviceMethod' => [
                'delete',
            ],
        ],
    ],
    $o[0],
    []
));
$mapper->mapRoute(\Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
    $o = [
        clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['inroutephp\\inroute\\Runtime\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('inroutephp\\inroute\\Runtime\\Route')),
    ],
    null,
    [
        'inroutephp\\inroute\\Runtime\\Route' => [
            'name' => [
                'workbench\\webb\\Http\\Route\\Claims:list',
            ],
            'routable' => [
                true,
            ],
            'httpMethods' => [
                [
                    'GET',
                ],
            ],
            'path' => [
                '/claims',
            ],
            'serviceId' => [
                'workbench\\webb\\Http\\Route\\Claims',
            ],
            'serviceMethod' => [
                'list',
            ],
        ],
    ],
    $o[0],
    []
));
$mapper->mapRoute(\Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
    $o = [
        clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['inroutephp\\inroute\\Runtime\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('inroutephp\\inroute\\Runtime\\Route')),
    ],
    null,
    [
        'inroutephp\\inroute\\Runtime\\Route' => [
            'name' => [
                'workbench\\webb\\Http\\Route\\Claims:newForm',
            ],
            'routable' => [
                true,
            ],
            'httpMethods' => [
                [
                    'GET',
                ],
            ],
            'path' => [
                '/claims/new',
            ],
            'serviceId' => [
                'workbench\\webb\\Http\\Route\\Claims',
            ],
            'serviceMethod' => [
                'newForm',
            ],
        ],
    ],
    $o[0],
    []
));
$mapper->mapRoute(\Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
    $o = [
        clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['inroutephp\\inroute\\Runtime\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('inroutephp\\inroute\\Runtime\\Route')),
    ],
    null,
    [
        'inroutephp\\inroute\\Runtime\\Route' => [
            'name' => [
                'workbench\\webb\\Http\\Route\\Claims:createNew',
            ],
            'routable' => [
                true,
            ],
            'httpMethods' => [
                [
                    'POST',
                ],
            ],
            'path' => [
                '/claims/new',
            ],
            'serviceId' => [
                'workbench\\webb\\Http\\Route\\Claims',
            ],
            'serviceMethod' => [
                'createNew',
            ],
        ],
    ],
    $o[0],
    []
));
$mapper->mapRoute(\Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
    $o = [
        clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['inroutephp\\inroute\\Runtime\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('inroutephp\\inroute\\Runtime\\Route')),
    ],
    null,
    [
        'inroutephp\\inroute\\Runtime\\Route' => [
            'name' => [
                'workbench\\webb\\Http\\Route\\Claims:get',
            ],
            'routable' => [
                true,
            ],
            'httpMethods' => [
                [
                    'GET',
                ],
            ],
            'path' => [
                '/claims/{id}',
            ],
            'serviceId' => [
                'workbench\\webb\\Http\\Route\\Claims',
            ],
            'serviceMethod' => [
                'get',
            ],
        ],
    ],
    $o[0],
    []
));
$mapper->mapRoute(\Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
    $o = [
        clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['inroutephp\\inroute\\Runtime\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('inroutephp\\inroute\\Runtime\\Route')),
    ],
    null,
    [
        'inroutephp\\inroute\\Runtime\\Route' => [
            'name' => [
                'workbench\\webb\\Http\\Route\\Claims:delete',
            ],
            'routable' => [
                true,
            ],
            'httpMethods' => [
                [
                    'POST',
                ],
            ],
            'path' => [
                '/claims/{id}/delete',
            ],
            'serviceId' => [
                'workbench\\webb\\Http\\Route\\Claims',
            ],
            'serviceMethod' => [
                'delete',
            ],
        ],
    ],
    $o[0],
    []
));
$mapper->mapRoute(\Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
    $o = [
        clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['inroutephp\\inroute\\Runtime\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('inroutephp\\inroute\\Runtime\\Route')),
    ],
    null,
    [
        'inroutephp\\inroute\\Runtime\\Route' => [
            'name' => [
                'workbench\\webb\\Http\\Route\\Claims:purge',
            ],
            'routable' => [
                true,
            ],
            'httpMethods' => [
                [
                    'POST',
                ],
            ],
            'path' => [
                '/claims/purge',
            ],
            'serviceId' => [
                'workbench\\webb\\Http\\Route\\Claims',
            ],
            'serviceMethod' => [
                'purge',
            ],
        ],
    ],
    $o[0],
    []
));
$mapper->mapRoute(\Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
    $o = [
        clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['inroutephp\\inroute\\Runtime\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('inroutephp\\inroute\\Runtime\\Route')),
    ],
    null,
    [
        'inroutephp\\inroute\\Runtime\\Route' => [
            'name' => [
                'trimmings.js',
            ],
            'routable' => [
                true,
            ],
            'httpMethods' => [
                [
                    'GET',
                ],
            ],
            'path' => [
                '/trimmings.js',
            ],
            'serviceId' => [
                'workbench\\webb\\Http\\Route\\Resources',
            ],
            'serviceMethod' => [
                'trimmings',
            ],
        ],
    ],
    $o[0],
    []
));
$mapper->mapRoute(\Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
    $o = [
        clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['inroutephp\\inroute\\Runtime\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('inroutephp\\inroute\\Runtime\\Route')),
    ],
    null,
    [
        'inroutephp\\inroute\\Runtime\\Route' => [
            'name' => [
                'bootstrap.min.css',
            ],
            'routable' => [
                true,
            ],
            'httpMethods' => [
                [
                    'GET',
                ],
            ],
            'path' => [
                '/bootstrap.min.css',
            ],
            'serviceId' => [
                'workbench\\webb\\Http\\Route\\Resources',
            ],
            'serviceMethod' => [
                'bootstrap',
            ],
        ],
    ],
    $o[0],
    []
));
$mapper->mapRoute(\Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
    $o = [
        clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['inroutephp\\inroute\\Runtime\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('inroutephp\\inroute\\Runtime\\Route')),
    ],
    null,
    [
        'inroutephp\\inroute\\Runtime\\Route' => [
            'name' => [
                'billboard',
            ],
            'routable' => [
                true,
            ],
            'httpMethods' => [
                [
                    'GET',
                ],
            ],
            'path' => [
                '/',
            ],
            'serviceId' => [
                'workbench\\webb\\Http\\Route\\Billboard',
            ],
            'serviceMethod' => [
                'get',
            ],
        ],
    ],
    $o[0],
    []
));
$mapper->mapRoute(\Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
    $o = [
        clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['inroutephp\\inroute\\Runtime\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('inroutephp\\inroute\\Runtime\\Route')),
    ],
    null,
    [
        'inroutephp\\inroute\\Runtime\\Route' => [
            'name' => [
                'workbench\\webb\\Http\\Route\\Billboard:post',
            ],
            'routable' => [
                true,
            ],
            'httpMethods' => [
                [
                    'POST',
                ],
            ],
            'path' => [
                '/',
            ],
            'serviceId' => [
                'workbench\\webb\\Http\\Route\\Billboard',
            ],
            'serviceMethod' => [
                'post',
            ],
        ],
    ],
    $o[0],
    []
));
$mapper->mapRoute(\Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
    $o = [
        clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['inroutephp\\inroute\\Runtime\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('inroutephp\\inroute\\Runtime\\Route')),
    ],
    null,
    [
        'inroutephp\\inroute\\Runtime\\Route' => [
            'name' => [
                'workbench\\webb\\Http\\Route\\Contact:newContactForm',
            ],
            'routable' => [
                true,
            ],
            'httpMethods' => [
                [
                    'GET',
                ],
            ],
            'path' => [
                '/contacts/new',
            ],
            'serviceId' => [
                'workbench\\webb\\Http\\Route\\Contact',
            ],
            'serviceMethod' => [
                'newContactForm',
            ],
        ],
    ],
    $o[0],
    []
));
$mapper->mapRoute(\Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
    $o = [
        clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['inroutephp\\inroute\\Runtime\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('inroutephp\\inroute\\Runtime\\Route')),
    ],
    null,
    [
        'inroutephp\\inroute\\Runtime\\Route' => [
            'name' => [
                'workbench\\webb\\Http\\Route\\Contact:newContactTarget',
            ],
            'routable' => [
                true,
            ],
            'httpMethods' => [
                [
                    'POST',
                ],
            ],
            'path' => [
                '/contacts/new',
            ],
            'serviceId' => [
                'workbench\\webb\\Http\\Route\\Contact',
            ],
            'serviceMethod' => [
                'newContactTarget',
            ],
        ],
    ],
    $o[0],
    []
));
$mapper->mapRoute(\Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
    $o = [
        clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['inroutephp\\inroute\\Runtime\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('inroutephp\\inroute\\Runtime\\Route')),
    ],
    null,
    [
        'inroutephp\\inroute\\Runtime\\Route' => [
            'name' => [
                'workbench\\webb\\Http\\Route\\Contact:describeContact',
            ],
            'routable' => [
                true,
            ],
            'httpMethods' => [
                [
                    'GET',
                ],
            ],
            'path' => [
                '/contacts/{id}',
            ],
            'serviceId' => [
                'workbench\\webb\\Http\\Route\\Contact',
            ],
            'serviceMethod' => [
                'describeContact',
            ],
        ],
    ],
    $o[0],
    []
));
$mapper->mapRoute(\Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
    $o = [
        clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['inroutephp\\inroute\\Runtime\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('inroutephp\\inroute\\Runtime\\Route')),
    ],
    null,
    [
        'inroutephp\\inroute\\Runtime\\Route' => [
            'name' => [
                'workbench\\webb\\Http\\Route\\Contact:editContactForm',
            ],
            'routable' => [
                true,
            ],
            'httpMethods' => [
                [
                    'GET',
                ],
            ],
            'path' => [
                '/contacts/{id}/edit',
            ],
            'serviceId' => [
                'workbench\\webb\\Http\\Route\\Contact',
            ],
            'serviceMethod' => [
                'editContactForm',
            ],
        ],
    ],
    $o[0],
    []
));
$mapper->mapRoute(\Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
    $o = [
        clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['inroutephp\\inroute\\Runtime\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('inroutephp\\inroute\\Runtime\\Route')),
    ],
    null,
    [
        'inroutephp\\inroute\\Runtime\\Route' => [
            'name' => [
                'workbench\\webb\\Http\\Route\\Contact:editContactTarget',
            ],
            'routable' => [
                true,
            ],
            'httpMethods' => [
                [
                    'POST',
                ],
            ],
            'path' => [
                '/contacts/{id}/edit',
            ],
            'serviceId' => [
                'workbench\\webb\\Http\\Route\\Contact',
            ],
            'serviceMethod' => [
                'editContactTarget',
            ],
        ],
    ],
    $o[0],
    []
));
$mapper->mapRoute(\Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
    $o = [
        clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['inroutephp\\inroute\\Runtime\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('inroutephp\\inroute\\Runtime\\Route')),
    ],
    null,
    [
        'inroutephp\\inroute\\Runtime\\Route' => [
            'name' => [
                'workbench\\webb\\Http\\Route\\Contact:deleteContactTarget',
            ],
            'routable' => [
                true,
            ],
            'httpMethods' => [
                [
                    'POST',
                ],
            ],
            'path' => [
                '/contacts/{id}/delete',
            ],
            'serviceId' => [
                'workbench\\webb\\Http\\Route\\Contact',
            ],
            'serviceMethod' => [
                'deleteContactTarget',
            ],
        ],
    ],
    $o[0],
    []
));
$mapper->mapRoute(\Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
    $o = [
        clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['inroutephp\\inroute\\Runtime\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('inroutephp\\inroute\\Runtime\\Route')),
    ],
    null,
    [
        'inroutephp\\inroute\\Runtime\\Route' => [
            'name' => [
                'workbench\\webb\\Http\\Route\\Log:list',
            ],
            'routable' => [
                true,
            ],
            'httpMethods' => [
                [
                    'GET',
                ],
            ],
            'path' => [
                '/log',
            ],
            'serviceId' => [
                'workbench\\webb\\Http\\Route\\Log',
            ],
            'serviceMethod' => [
                'list',
            ],
        ],
    ],
    $o[0],
    []
));
    }
}
